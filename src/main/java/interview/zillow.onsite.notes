2019 9 20
1. * Given a list of numbers, return all numbers which occurs odd times
   * Word search, give a 2D matrix and a list of words, find from any point in the matrix can build a valid word, the
     direction is 3 ways: left-to-right, up-to-down and left-upper to right-bottom
     DFS or BFS?

2. System Design
A In house:
* there is a hub which can lock or unlock the door of the house, system send command to the hub to take action to
  lock or unlock the door. This is Asynchronous command which means system sends the request to hub, but not wait hub send
  the response back.
* Hub will send notification to system when it finishes an action which is lock or unlock
* This is also a camera to detect the movement around the door, if there is no movement in 15 mins time interval, it will send
  "Idle" status to system. If there is a movement, it will send "Active" status to system immediately.

B In client:
* client can use smart phone app to scan the door and click the unlock button, it will send a RESTful request to system
* system will lock the door after 30 seconds of the unlock action
* If a unlock happen, system will send an Email to Employee including information for this time unlock.

Design: key components, RESTful API, data store module
Function:
1. Unlock the door, the workflow is client send RESTful request to webServer through load balancer (user to Application Server Map),
Application Server can keep user's Authentication/Authorization info in memory or in user DB shard, after retrieve user information,
AppSer send command to HUB and directly return OK to user. However we need keep all "alive" requests in a middle cache, we called "Alive Lock Pool"

2. Hub will send a notification to Server after it unlock the door, the AppServ need process the notification and send it to responding users
Handle these notification in a processing queue, and we need search user information in "Alive Lock Pool", so can send a notification to user.
AppServ will process them one by one, including to quickly retrieve corresponding house/user information from "Alive Lock Pool", update the house status
and remove it from "Alive Lock Pool"
We also need a scanner to scan all object in "Alive Lock Pool", after 30 seconds, we will send lock command to HUB.

3. When AppServ sends lock command to Hub, we also keep a "Pending lock pool" and wait for HUB notification for "successfully locked"
There is another processing queue to cache all these kind of notifications. App server take notification one by one, do the following steps:
   a. find the corresponding entry in "Pending lock pool"
   b. update house status in DB,
   c. remove it from "Pending lock pool".

4. Camera: every 15 mins, it will send a notification for house "Idle/Safe" to AppServ, AppSever will keep a cache for all the house status
   If camera detects a movement, it will send notification immediately to AppServer. AppServer will find the house status from DB or
   from "Alive Lock Pool", if it is "unlocked" or in "Alive Lock Pool", which means the HUB unlocked the door, that is expected,
   otherwise, will trigger Alarm system.

RESTful API
* the difference with PUT and POST is PUT is change and POST is create
@PUT
@Path("/unlock")
public Response unlock(@parameter: userId, timestamp, houseId)

RESTful API
@GET can return JSON body including information

Key components: App Servers with load balancer, user DB, house DB, Processing Queue for 2 types of notification, Cache to store "Alive unlock pool"
and "pending lock pool", this cache should be key-value pair, key can be houseId, value is action information, Log DB (non-SQL), Email/notification server

Data Store
How to store house information, NO-SQL
Queue for Notification

3. Given a data stream with keep feed in the system, return in the past 5 mins, top K most visited URL
input is the data stream(URLs), output should be a list of URLs similar with hit count
use heap to keep K most visited URL PriorityQueue
2 maps, one keep <URL, count>; one keep <URL, list of Entry> Entry including timestamp of the URL
when read a new URL, lazy update 2 maps, update PriorityQueue

keep a cache in memory, that is the result of during last 5 mins, top K most visited URL. we run the above method every
10 seconds and in the end to update the cache.

4. prefix, infix and postfix
for (a-b)*c
prefix is -ab*c, infix is a-b*c, postfix is ab-c*
given a prefix, return postfix
we can build a tree from prefix, which is
if next char is op, build a node and keep build left and right, otherwise return to upper level
or we can also use single stack to parse the prefix, which is when we parse a number B in the string, if the pop of the
stack is a number A, pop A and use the top of the stack op to calculate A op B, (we also pop the stack of operator)
and push the result back.
